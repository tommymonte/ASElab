


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             asm, CODE, READONLY
    2 00000000                 EXPORT           check_fibonacci
    3 00000000         
    4 00000000         ; 1) salva i registri come input nei nuovi registri, da 
                       r4 in poi
    5 00000000         ;  NB: se hai più di 4 input il 5 devi salvarlo così:
    6 00000000         ;  MOV R12, SP  
    7 00000000         ;  LDRB R4, [R12]  
    8 00000000         
    9 00000000         ; 2) se devi caricare un vettore con valori da 32 bit us
                       a -->  LDR R6, [R0, R4, LSL #2] 
   10 00000000         ;  - R0 punta all'indirizzo base vettore
   11 00000000         ;  - R4 è l'indice del vettore, R6 dove salvi il valore
   12 00000000         ;   - LSL #2 shifta l'indirizzo base del vettore di 4 by
                       te
   13 00000000         ;  se invece ha elementi da 8 bit, basta usare LDRB
   14 00000000         ;   LDRB R6, [R0, R4]
   15 00000000         ; NB: devi poi incrementare R4 ovvero l'offset
   16 00000000         
   17 00000000         ; 3) se devi verificare che un numero sia pari o dispari
                        usa
   18 00000000         ;  TST R4, #1
   19 00000000         ;  MOVEQ R5, #1 --> è pari
   20 00000000         ;   MOVNE R5, #0 --> dipari
   21 00000000         
   22 00000000         ; 4) se devi salvare un valore a un puntatore utilizza S
                       TRB R4, [R0]
   23 00000000         ;  R0 è il registro di input in cui viene passato il pun
                       tatore
   24 00000000         ;   R4 è il valore che vuoi salvare
   25 00000000         
   26 00000000         ; 5) se voglio fare abs(-2) devo fare:
   27 00000000         ;  check_abs CMP R0, #0
   28 00000000         ;    BLT abs
   29 00000000         ;   abs    RSB R0, R0, #0 --> rsb fa una reverse sub: 0 
                       - (-2) = +2
   30 00000000         ;     B check_abs
   31 00000000         
   32 00000000         ; 6) **Istruzioni di Branch:**
   33 00000000         ; - **`BVS`**: Salta se il flag V ? impostato (overflow)
                       .
   34 00000000         ; - **`BVC`**: Salta se il flag V non ? impostato (nessu
                       n overflow).
   35 00000000         ; - **`BCS`**: Salta se il flag C ? impostato (carry).
   36 00000000         ; - **`BCC`**: Salta se il flag C non ? impostato (nessu
                       n carry).
   37 00000000         
   38 00000000         ; R0 VETT
   39 00000000         ; R1 N elementi
   40 00000000         ; R2 M 
   41 00000000         ;  R3 VAL
   42 00000000         ;  LDRB R4, [R12]  ; boundary BOUNDARY è posizionato 16 
                       byte sopra SP (dopo 4 parametri * 4 byte ciascuno) BOUND
                       ARY
   43 00000000         
   44 00000000         check_fibonacci
                               PROC
   45 00000000 46EC            MOV              R12, SP
   46 00000002 E92D 4DF0       STMFD            SP!,{R4-R8,R10-R11,LR} ;SALVO R



ARM Macro Assembler    Page 2 


                                                            EGISTRI VOLATILI
   47 00000006 F89C 4000       LDRB             R4, [R12]   ; boundary
   48 0000000A F04F 0500       MOV              R5, #0      ; index
   49 0000000E         
   50 0000000E         ; cerchiamo la prima posizione libera
   51 0000000E 428D    CHECK_FIRST
                               CMP              R5, R1
   52 00000010 D025            BEQ              NON_ACCETTABILE
   53 00000012 5D46            LDRB             R6, [R0, R5]
   54 00000014 2E00            CMP              R6, #0
   55 00000016 D002            BEQ              FREE_POS
   56 00000018         
   57 00000018 F105 0501       ADD              R5, R5, #1  ; incremento index 
                                                            count
   58 0000001C E7F7            B                CHECK_FIRST
   59 0000001E         
   60 0000001E         FREE_POS
   61 0000001E F04F 0700       MOV              R7, #0
   62 00000022 F04F 0801       MOV              R8, #1
   63 00000026 F04F 0A00       MOV              R10, #0     ; INDICE PER M
   64 0000002A         
   65 0000002A 4592    CHECK_FIBO
                               CMP              R10, R2     ; CMP CON M
   66 0000002C D012            BEQ              ACCETTABILE ; SONO ARRIVATO A 1
                                                            4 VUOL DIRE CHE HO 
                                                            CONFRONTATO TUTTI I
                                                             VALORI QUINDI è AC
                                                            CETTABILE
   67 0000002E         
   68 0000002E         ; GUARDO SE VAL è ACCETTABILE
   69 0000002E         ; PRIMA GUARDO SE è UGUALE A UN NUMERO DELLA SERIE
   70 0000002E 42BB            CMP              R3, R7
   71 00000030 D015            BEQ              NON_ACCETTABILE
   72 00000032 4543            CMP              R3, R8
   73 00000034 D013            BEQ              NON_ACCETTABILE
   74 00000036 EBA3 0B07       SUB              R11, R3, R7
   75 0000003A         
   76 0000003A F1BB 0F00 
                       CHECK_BOUNDARY
                               CMP              R11, #0
   77 0000003E DB06            BLT              ABS
   78 00000040         
   79 00000040 45A3            CMP              R11, R4
   80 00000042 DD0C            BLE              NON_ACCETTABILE ; val <= bounda
                                                            ry --> fine
   81 00000044         
   82 00000044 F10A 0A02       ADD              R10, R10, #2
   83 00000048         
   84 00000048         ; AGGIORNO LA SERIE
   85 00000048         ; 0 1 --> 1 2 --> 3 5 --> 8 13 ...
   86 00000048 4447            ADD              R7, R7, R8
   87 0000004A 44B8            ADD              R8, R8, R7
   88 0000004C E7ED            B                CHECK_FIBO
   89 0000004E         
   90 0000004E F1CB 0B00 
                       ABS     RSB              R11, R11, #0
   91 00000052 E7F2            B                CHECK_BOUNDARY
   92 00000054         
   93 00000054         ACCETTABILE                          ;LSL R5, R5, #2



ARM Macro Assembler    Page 3 


   94 00000054 4405            ADD              R5, R0, R5
   95 00000056 702B            STRB             R3, [R5]
   96 00000058         
   97 00000058 F04F 0001       MOV              R0, #1
   98 0000005C E002            B                FINE
   99 0000005E         
  100 0000005E F04F 0000 
                       NON_ACCETTABILE
                               MOV              R0, #0
  101 00000062 E7FF            B                FINE
  102 00000064         
  103 00000064         
  104 00000064 E8BD 8DF0 
                       FINE    LDMFD            SP!,{R4-R8,R10-R11,PC} ;RIPRIST
                                                            INO REGISTRI VOLATI
                                                            LI
  105 00000068                 ENDP
  106 00000068                 END
Command Line: --debug --xref --diag_suppress=9931,A1950W --cpu=Cortex-M3 --depe
nd=.\objects\asm.d -o.\objects\asm.o -I.\Source\button_EXINT -I.\Source\CMSIS_c
ore -I.\Source\joystick -I.\Source\led -I.\Source\RIT -I.\Source\timer -I.\Sour
ce -I.\RTE\_SW_Debug -IC:\Users\HP\AppData\Local\Arm\Packs\ARM\CMSIS\6.1.0\CMSI
S\Core\Include -IC:\Users\HP\AppData\Local\Arm\Packs\Keil\LPC1700_DFP\2.7.2\Dev
ice\Include --predefine="__UVISION_VERSION SETA 541" --predefine="LPC175x_6x SE
TA 1" --predefine="_RTE_ SETA 1" --list=.\listings\asm.lst asm.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

ABS 0000004E

Symbol: ABS
   Definitions
      At line 90 in file asm.s
   Uses
      At line 77 in file asm.s
Comment: ABS used once
ACCETTABILE 00000054

Symbol: ACCETTABILE
   Definitions
      At line 93 in file asm.s
   Uses
      At line 66 in file asm.s
Comment: ACCETTABILE used once
CHECK_BOUNDARY 0000003A

Symbol: CHECK_BOUNDARY
   Definitions
      At line 76 in file asm.s
   Uses
      At line 91 in file asm.s
Comment: CHECK_BOUNDARY used once
CHECK_FIBO 0000002A

Symbol: CHECK_FIBO
   Definitions
      At line 65 in file asm.s
   Uses
      At line 88 in file asm.s
Comment: CHECK_FIBO used once
CHECK_FIRST 0000000E

Symbol: CHECK_FIRST
   Definitions
      At line 51 in file asm.s
   Uses
      At line 58 in file asm.s
Comment: CHECK_FIRST used once
FINE 00000064

Symbol: FINE
   Definitions
      At line 104 in file asm.s
   Uses
      At line 98 in file asm.s
      At line 101 in file asm.s

FREE_POS 0000001E

Symbol: FREE_POS
   Definitions
      At line 60 in file asm.s
   Uses
      At line 55 in file asm.s
Comment: FREE_POS used once
NON_ACCETTABILE 0000005E




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: NON_ACCETTABILE
   Definitions
      At line 100 in file asm.s
   Uses
      At line 52 in file asm.s
      At line 71 in file asm.s
      At line 73 in file asm.s
      At line 80 in file asm.s

asm 00000000

Symbol: asm
   Definitions
      At line 1 in file asm.s
   Uses
      None
Comment: asm unused
check_fibonacci 00000000

Symbol: check_fibonacci
   Definitions
      At line 44 in file asm.s
   Uses
      At line 2 in file asm.s
Comment: check_fibonacci used once
10 symbols
343 symbols in table
