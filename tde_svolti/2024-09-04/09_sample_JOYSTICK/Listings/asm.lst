


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             asm, CODE, READONLY
    2 00000000                 EXPORT           avg_vett
    3 00000000         
    4 00000000         ; 1) salva i registri come input nei nuovi registri, da 
                       r4 in poi
    5 00000000         ; 2) se devi caricare un vettore usa -->  LDR R6, [R0, R
                       4, LSL #2] 
    6 00000000         ;  R0 punta all'indirizzo base vettore
    7 00000000         ;  R4 è l'indice del vettore, R6 dove salvi il valore
    8 00000000         ;   LSL #2 shifta l'indirizzo base del vettore di 4 byte
                       
    9 00000000         ; 3) se devi verificare che un numero sia pari o dispari
                        usa
   10 00000000         ;  TST R4, #1
   11 00000000         ;  MOVEQ R5, #1 --> è pari
   12 00000000         ;   MOVNE R5, #0 --> dipari
   13 00000000         ; 4) se devi salvare un valore a un puntatore utilizza S
                       TRB R4, [R0]
   14 00000000         ;  R0 è il registro di input in cui viene passato il pun
                       tatore
   15 00000000         ;   R4 è il valore che vuoi salvare
   16 00000000         
   17 00000000         ; R0 VETT
   18 00000000         ; R1 dim
   19 00000000         ; R2 flag
   20 00000000         
   21 00000000         
   22 00000000         avg_vett
                               PROC
   23 00000000 E92D 4DF0       STMFD            SP!,{R4-R8,R10-R11,LR} ;SALVO R
                                                            EGISTRI VOLATILI
   24 00000004         
   25 00000004 F04F 0400       MOV              R4, #0      ; INDEX
   26 00000008 F04F 0500       MOV              R5, #0      ; SOMMA VALORI
   27 0000000C         
   28 0000000C 428C    LOOP    CMP              R4, R1
   29 0000000E D005            BEQ              AVERAGE
   30 00000010 F850 6024       LDR              R6, [R0, R4, LSL #2]
   31 00000014 4435            ADD              R5, R5, R6
   32 00000016         
   33 00000016 F104 0401       ADD              R4, R4, #1
   34 0000001A E7F7            B                LOOP
   35 0000001C         
   36 0000001C F04F 0700 
                       AVERAGE MOV              R7, #0
   37 00000020 FBB5 F7F1       UDIV             R7, R5, R1  ; R7 = R6/R1
   38 00000024         
   39 00000024 F04F 0400 
                       CHECK   MOV              R4, #0
   40 00000028 F04F 0800       MOV              R8, #0
   41 0000002C         
   42 0000002C 428C    LOOP2   CMP              R4, R1
   43 0000002E D00B            BEQ              ODD_EVEN_CHECK
   44 00000030 F850 6024       LDR              R6, [R0, R4, LSL #2]
   45 00000034 42BE            CMP              R6, R7
   46 00000036 DC02            BGT              IS_HIGHER
   47 00000038         
   48 00000038 F104 0401       ADD              R4, R4, #1
   49 0000003C E7F6            B                LOOP2



ARM Macro Assembler    Page 2 


   50 0000003E         
   51 0000003E F108 0801 
                       IS_HIGHER
                               ADD              R8, R8, #1
   52 00000042 F104 0401       ADD              R4, R4, #1
   53 00000046 E7F1            B                LOOP2
   54 00000048         
   55 00000048 F018 0F01 
                       ODD_EVEN_CHECK
                               TST              R8, #1
   56 0000004C BF0C F04F 
              0A01             MOVEQ            R10, #1
   57 00000052 F04F 0A00       MOVNE            R10, #0
   58 00000056 F882 A000       STRB             R10, [R2]
   59 0000005A         
   60 0000005A 4640    FINE    MOV              R0, R8
   61 0000005C E8BD 8DF0       LDMFD            SP!,{R4-R8,R10-R11,PC} ;RIPRIST
                                                            INO REGISTRI VOLATI
                                                            LI
   62 00000060                 ENDP
   63 00000060                 END
Command Line: --debug --xref --diag_suppress=9931,A1950W --cpu=Cortex-M3 --depe
nd=.\objects\asm.d -o.\objects\asm.o -I.\Source\button_EXINT -I.\Source\CMSIS_c
ore -I.\Source\joystick -I.\Source\led -I.\Source\RIT -I.\Source\timer -I.\Sour
ce -I.\RTE\_SW_Debug -IC:\Users\HP\AppData\Local\Arm\Packs\ARM\CMSIS\6.1.0\CMSI
S\Core\Include -IC:\Users\HP\AppData\Local\Arm\Packs\Keil\LPC1700_DFP\2.7.2\Dev
ice\Include --predefine="__UVISION_VERSION SETA 541" --predefine="LPC175x_6x SE
TA 1" --predefine="_RTE_ SETA 1" --list=.\listings\asm.lst asm.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

AVERAGE 0000001C

Symbol: AVERAGE
   Definitions
      At line 36 in file asm.s
   Uses
      At line 29 in file asm.s
Comment: AVERAGE used once
CHECK 00000024

Symbol: CHECK
   Definitions
      At line 39 in file asm.s
   Uses
      None
Comment: CHECK unused
FINE 0000005A

Symbol: FINE
   Definitions
      At line 60 in file asm.s
   Uses
      None
Comment: FINE unused
IS_HIGHER 0000003E

Symbol: IS_HIGHER
   Definitions
      At line 51 in file asm.s
   Uses
      At line 46 in file asm.s
Comment: IS_HIGHER used once
LOOP 0000000C

Symbol: LOOP
   Definitions
      At line 28 in file asm.s
   Uses
      At line 34 in file asm.s
Comment: LOOP used once
LOOP2 0000002C

Symbol: LOOP2
   Definitions
      At line 42 in file asm.s
   Uses
      At line 49 in file asm.s
      At line 53 in file asm.s

ODD_EVEN_CHECK 00000048

Symbol: ODD_EVEN_CHECK
   Definitions
      At line 55 in file asm.s
   Uses
      At line 43 in file asm.s
Comment: ODD_EVEN_CHECK used once
asm 00000000




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: asm
   Definitions
      At line 1 in file asm.s
   Uses
      None
Comment: asm unused
avg_vett 00000000

Symbol: avg_vett
   Definitions
      At line 22 in file asm.s
   Uses
      At line 2 in file asm.s
Comment: avg_vett used once
9 symbols
342 symbols in table
